// Code generated by mockery v2.14.1. DO NOT EDIT.

package storeProduct

import (
	product "bitbucket.easy.de/users/n.gauche/service-shop-go/internal/product"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type RepositoryMock struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryMock) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: idStore, idProduct
func (_m *RepositoryMock) Delete(idStore string, idProduct string) error {
	ret := _m.Called(idStore, idProduct)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(idStore, idProduct)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Repository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - idStore string
//  - idProduct string
func (_e *Repository_Expecter) Delete(idStore interface{}, idProduct interface{}) *Repository_Delete_Call {
	return &Repository_Delete_Call{Call: _e.mock.On("Delete", idStore, idProduct)}
}

func (_c *Repository_Delete_Call) Run(run func(idStore string, idProduct string)) *Repository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Repository_Delete_Call) Return(_a0 error) *Repository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// Get provides a mock function with given fields: idStore, idProduct
func (_m *RepositoryMock) Get(idStore string, idProduct string) (StoreProduct, error) {
	ret := _m.Called(idStore, idProduct)

	var r0 StoreProduct
	if rf, ok := ret.Get(0).(func(string, string) StoreProduct); ok {
		r0 = rf(idStore, idProduct)
	} else {
		r0 = ret.Get(0).(StoreProduct)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(idStore, idProduct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Repository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - idStore string
//  - idProduct string
func (_e *Repository_Expecter) Get(idStore interface{}, idProduct interface{}) *Repository_Get_Call {
	return &Repository_Get_Call{Call: _e.mock.On("Get", idStore, idProduct)}
}

func (_c *Repository_Get_Call) Run(run func(idStore string, idProduct string)) *Repository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *Repository_Get_Call) Return(_a0 StoreProduct, _a1 error) *Repository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *RepositoryMock) GetAll() ([]StoreProduct, error) {
	ret := _m.Called()

	var r0 []StoreProduct
	if rf, ok := ret.Get(0).(func() []StoreProduct); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]StoreProduct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type Repository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *Repository_Expecter) GetAll() *Repository_GetAll_Call {
	return &Repository_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *Repository_GetAll_Call) Run(run func()) *Repository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_GetAll_Call) Return(_a0 []StoreProduct, _a1 error) *Repository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetByCategory provides a mock function with given fields: categoryName
func (_m *RepositoryMock) GetByCategory(categoryName product.Category) ([]StoreProduct, error) {
	ret := _m.Called(categoryName)

	var r0 []StoreProduct
	if rf, ok := ret.Get(0).(func(product.Category) []StoreProduct); ok {
		r0 = rf(categoryName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]StoreProduct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(product.Category) error); ok {
		r1 = rf(categoryName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetByCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCategory'
type Repository_GetByCategory_Call struct {
	*mock.Call
}

// GetByCategory is a helper method to define mock.On call
//  - categoryName product.Category
func (_e *Repository_Expecter) GetByCategory(categoryName interface{}) *Repository_GetByCategory_Call {
	return &Repository_GetByCategory_Call{Call: _e.mock.On("GetByCategory", categoryName)}
}

func (_c *Repository_GetByCategory_Call) Run(run func(categoryName product.Category)) *Repository_GetByCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(product.Category))
	})
	return _c
}

func (_c *Repository_GetByCategory_Call) Return(_a0 []StoreProduct, _a1 error) *Repository_GetByCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Post provides a mock function with given fields: sp
func (_m *RepositoryMock) Post(sp StoreProduct) (StoreProduct, error) {
	ret := _m.Called(sp)

	var r0 StoreProduct
	if rf, ok := ret.Get(0).(func(StoreProduct) StoreProduct); ok {
		r0 = rf(sp)
	} else {
		r0 = ret.Get(0).(StoreProduct)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(StoreProduct) error); ok {
		r1 = rf(sp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type Repository_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//  - sp storeProduct.StoreProduct
func (_e *Repository_Expecter) Post(sp interface{}) *Repository_Post_Call {
	return &Repository_Post_Call{Call: _e.mock.On("Post", sp)}
}

func (_c *Repository_Post_Call) Run(run func(sp StoreProduct)) *Repository_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(StoreProduct))
	})
	return _c
}

func (_c *Repository_Post_Call) Return(_a0 StoreProduct, _a1 error) *Repository_Post_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryMock(t mockConstructorTestingTNewRepository) *RepositoryMock {
	mock := &RepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
