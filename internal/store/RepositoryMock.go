// Code generated by mockery v2.14.1. DO NOT EDIT.

package store

import (
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type RepositoryMock struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryMock) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: id
func (_m *RepositoryMock) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Repository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - id string
func (_e *Repository_Expecter) Delete(id interface{}) *Repository_Delete_Call {
	return &Repository_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *Repository_Delete_Call) Run(run func(id string)) *Repository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_Delete_Call) Return(_a0 error) *Repository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// Get provides a mock function with given fields: id
func (_m *RepositoryMock) Get(id string) (Store, error) {
	ret := _m.Called(id)

	var r0 Store
	if rf, ok := ret.Get(0).(func(string) Store); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(Store)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Repository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - id string
func (_e *Repository_Expecter) Get(id interface{}) *Repository_Get_Call {
	return &Repository_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *Repository_Get_Call) Run(run func(id string)) *Repository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Repository_Get_Call) Return(_a0 Store, _a1 error) *Repository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAll provides a mock function with given fields:
func (_m *RepositoryMock) GetAll() ([]Store, error) {
	ret := _m.Called()

	var r0 []Store
	if rf, ok := ret.Get(0).(func() []Store); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Store)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type Repository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *Repository_Expecter) GetAll() *Repository_GetAll_Call {
	return &Repository_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *Repository_GetAll_Call) Run(run func()) *Repository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_GetAll_Call) Return(_a0 []Store, _a1 error) *Repository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Ping provides a mock function with given fields:
func (_m *RepositoryMock) Ping() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type Repository_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
func (_e *Repository_Expecter) Ping() *Repository_Ping_Call {
	return &Repository_Ping_Call{Call: _e.mock.On("Ping")}
}

func (_c *Repository_Ping_Call) Run(run func()) *Repository_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_Ping_Call) Return(_a0 error) *Repository_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

// Post provides a mock function with given fields: p
func (_m *RepositoryMock) Post(p Store) (Store, error) {
	ret := _m.Called(p)

	var r0 Store
	if rf, ok := ret.Get(0).(func(Store) Store); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(Store)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(Store) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_Post_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Post'
type Repository_Post_Call struct {
	*mock.Call
}

// Post is a helper method to define mock.On call
//  - p store.Store
func (_e *Repository_Expecter) Post(p interface{}) *Repository_Post_Call {
	return &Repository_Post_Call{Call: _e.mock.On("Post", p)}
}

func (_c *Repository_Post_Call) Run(run func(p Store)) *Repository_Post_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(Store))
	})
	return _c
}

func (_c *Repository_Post_Call) Return(_a0 Store, _a1 error) *Repository_Post_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepositoryMock(t mockConstructorTestingTNewRepository) *RepositoryMock {
	mock := &RepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
